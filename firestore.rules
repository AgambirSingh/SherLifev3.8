rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     match /users/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }
    
    // Ensure username is unique before setting
    match /usernames/{username} {
      allow create: if !exists(/databases/$(database)/documents/usernames/$(username));
      allow read: if request.auth != null;
    }
      // Require profile completion for certain operations
      function isProfileComplete() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isProfileComplete == true;
      }
    }

    // Marketplace listings
    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.sellerId == request.auth.uid;
    }


    // Events
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.organizerId == request.auth.uid;
    }

    //confession
      match /confessions/{confessionId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'downvotes', 'isFlagged']);
    }
    //confession
    match /votes/{voteId} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated();
    }

    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
